# -*- coding: utf-8 -*-
"""UCP System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJycntaXOHSNB91Am-9--7EZj_QLV8CH
"""

#Parent
class Person:
    def __init__(self, name, age,cnic, email):
        self.name = name
        self.age = age
        self.cnic = cnic
        self.email = email
    def show_info(self):
        print(f"Name: {self.name}, Age: {self.age}, CNIC: {self.cnic}, Email: {self.email}")

# Parent -> Student
class Student(Person):
    id = 0
    def __init__(self, name, age, cnic, email, degree, semester):
        super().__init__(name, age, cnic, email)
        self.student_id = self.get_university_id()
        self.degree = degree
        self.semester = semester
        self.grade = {}

    def get_university_id(self):
        Student.id += 1
        return f"UCP-BSCS-2025-{Student.id}"

    def show_info(self):
        super().show_info()
        print(f"Student ID: {self.student_id}, Degree: {self.degree}, Semester: {self.semester}, Grade: {self.grade}")


# Parent->Student->GraduateStudent
class GraduateStudent(Student):
    def __init__(self, name, age, cnic, email, degree, semester, thesis_title, supervisor):
        super().__init__(name, age, cnic, email, degree, semester)
        self.thesis_title = thesis_title
        self.supervisor = supervisor

    def show_info(self):
        print(f"Name: {self.name} Age: {self.age} CNIC: {self.cnic} Email: {self.email}")

    def is_ready_for_defense(self):
        if self.thesis_title:
            return True
        return False

# Person -> Teacher
class Teacher(Person):
    def __init__(self, name, age, cnic, email, employee_id, subject, designation):
        super().__init__(name, age, cnic, email)
        self.employee_id = employee_id
        self.subject = subject
        self.designation = designation
    def assign_grade(self, student, grade):
        student.grade.update(grade)

    def show_info(self):
        super().show_info()
        print(f"Employee ID: {self.employee_id}, Subject: {self.subject}, Designation: {self.designation}")
# Parent -> Staff
class Staff(Person):
    def __init__(self, name, age, cnic, email, staff_id, role):
        super().__init__(name, age, cnic, email)
        self.staff_id = staff_id
        self.role = role
    def show_info(self):
        super().show_info()
        print(f"Staff ID: {self.staff_id}, Role: {self.role}")
    def perform_task(task_name):
        print(f"Performing task: {task_name}")

class Researcher:
    def __init__(self, research_field, published_papers):
        self.research_field = research_field
        self.published_papers = published_papers
    def add_publiications(self,title):
        self.published_papers.append(title)

    def show_publications(self):
        print("Published Papers:")
        for paper in self.published_papers:
            print(paper)

class ResearchStudent(Student, Researcher):
    def __init__(self, name, age, cnic, email, degree, semester,research_area, supervisor_name):
        Student.__init__(self, name, age, cnic, email, degree, semester)
        Researcher.__init__(self, research_area, [])
        self.supervisor_name = supervisor_name
    def show_research_info(self):
        print(f"Research Area: {self.research_area}, Supervisor Name: {self.supervisor_name}")

"""# **Student Menu**"""

def student_menu(Students):
  cnic = input("Enter CNIC to confirm your identity: ")
  for student in Students:
    if student.cnic == cnic:
        print(f"Welcome Student {student.name}!")
        student.show_info()
        print(Student.__mro__)

"""# Teacher's **Menu**"""

#Teacher's Menu
def teacher_menu(Teachers):
  cnic = input("Enter CNIC to confirm your identity: ")
  for teacher in Teachers:
    if teacher.cnic == cnic:
      flag = 'N'
      while flag != 'Y':
        print(f"Welcome Teacher {teacher.name}!")
        print("Press 1 to see all students")
        print("press 2 to assign grade to student")
        choice = input("Enter your choice: ")
        if choice == "1":
          for student in Students:
            print(f"Student Name: {student.name}, Roll No: {student.student_id}, Grade: {student.grade}")
        elif choice == "2":
          roll_no = input("Enter roll no of student: ")
          for student in Students:
            if student.student_id == roll_no:
              grade = input("Enter grade: ")
              grade = {
                  teacher.subject: grade
              }
              teacher.assign_grade(student, grade)
              print("Grade assigned successfully!")
              break
        flag = input("Do you want to Leave? (Y/N): ")
        if flag == 'Y':
          print(Teacher.__mro__)

"""# **Graduate STUDENT'S MENU**"""

#Graduate STUDENT'S MENU
def graduate_student_menu(GraduateStudents):
  cnic = input("Enter CNIC to confirm your identity: ")
  for graduate_student in GraduateStudents:
    if graduate_student.cnic == cnic:
      flag = 'N'
      while flag != 'Y':
        print(f"Welcome Graduate Student {graduate_student.name}!")
        print("Press 1 to see all your Details")
        print("press 2 to see the status of your thesis")
        choice = input("Enter your choice: ")
        if choice == "1":
          graduate_student.show_info()
        elif choice == "2":
          if graduate_student.is_ready_for_defense():
            print("Your thesis is ready for defense.")
        flag = input("Do you want to Leave? (Y/N): ")
        if flag == 'Y':
          print(GraduateStudent.__mro__)

"""# **research_student_menu**"""

def research_student_menu(ResearchStudents):
  cnic = input("Enter CNIC to confirm your identity: ")
  for research_student in ResearchStudents:
    if research_student.cnic == cnic:
        print(f"Welcome Research Student {research_student.name}!")
        flag = 'N'
        while flag != 'Y':
          print("Press 1 to add publications")
          print("press 2 to see all publications")
          choice = input("Enter your choice: ")
          if choice == "1":
            while True:
              published_paper = input("Enter the title of the published paper: ")
              research_student.add_publiications(published_paper)
              flag = input("Do you want to add more publications? (Y/N): ")
              if flag == 'N':
                break
          elif choice == "2":
            research_student.show_publications()
          flag = input("Do you want to Leave? (Y/N): ")
          if flag == 'Y':
            print(ResearchStudent.__mro__)

"""# **staff_menu**"""

def staff_menu(staff, Teachers, Students):
  cnic = input("Enter CNIC to confirm your identity: ")
  if staff.cnic == cnic:
    print(f"Welcome Admin {staff.name}!")
    flag = 'N'
    while flag != 'Y':
      print("Press 1 to see all students")
      print("press 2 to see all teachers")
      print("press 3 to add students")
      print("press 4 to add teachers")
      choice = input("Enter your choice: ")
      if choice == "1":
        staff.perform_task("Seeing all Students")
        for student in Students:
          print(f"Student Name: {student.name}, Roll No: {student.student_id}, Grade: {student.grade}")
      elif choice == "2":
        staff.perform_task("Seeing all Teachers")
        for teacher in Teachers:
          print(f"Teacher Name: {teacher.name}, Employee ID: {teacher.employee_id}, Subject: {teacher.subject}, Designation: {teacher.designation}")
      elif choice == "3":
        staff.perform_task("Adding Students")
        name = input("Enter student name: ")
        age = int(input("Enter student age: "))
        cnic = input("Enter student CNIC: ")
        email = input("Enter student email: ")
        degree = input("Enter student degree: ")
        semester = input("Enter student semester: ")
        student = Student(name, age, cnic, email, degree, semester)
        Students.append(student)
        print("Student added successfully!")
      elif choice == "4":
        staff.perform_task("Adding Teachers")
        name = input("Enter teacher name: ")
        age = int(input("Enter teacher age: "))
        cnic = input("Enter teacher CNIC: ")
        email = input("Enter teacher email: ")
        employee_id = input("Enter teacher employee ID: ")
        subject = input("Enter teacher subject: ")
        designation = input("Enter teacher designation: ")
        teacher = Teacher(name, age, cnic, email, employee_id, subject, designation)
        Teachers.append(teacher)
        print("Teacher added successfully!")
      flag = input("Do you want to Leave? (Y/N): ")
      if flag == 'Y':
        print(Staff.__mro__)

"""# **menu**"""

def menu(Students, Teachers, Staffs, ResearchStudents, GraduateStudent):
    designation = input("Enter your designation (Student/Teacher/Staff/ResearchStudent/GraduateStudent): ")
    if designation.lower() == "student":
        student_menu(Students)
    elif designation.lower() == "teacher":
        teacher_menu(Teachers)
    elif designation.lower() == "graduatestudent":
        graduate_student_menu(GraduateStudents)
    elif designation.lower() == "researchstudent":
        research_student_menu(ResearchStudents)
    elif designation.lower() == "staff":
        staff_menu(Staffs, Teachers, Students)
    else:
        print("Invalid designation")

Students = []
Teachers = []
Staffs = []
ResearchStudents = []
GraduateStudents = []

Students.append(Student("faizan", 20, "352029-322-21", "faizan@gmail.com", "BSSE", "8th"))
Students.append(Student("ashraf", 20, "3520329-322-21", "ashraf@gmail.com", "BSSE", "8th"))
Students.append(Student("haider", 19, "352029-332-21", "haider@gmail.com", "BSSE", "8th"))
GraduateStudents.append(GraduateStudent("Ali", 21, "3432429-322-21", "ali@gmail.com", "MSCS", "2nd", "Ethical Implications of AI in Decision-Making Processes", "Abid"))
GraduateStudents.append(GraduateStudent("usman", 21, "353029-322-21", "usman@gmail.com", "BSSE", "1st","",""))

Teachers.append(Teacher("abid", 35, "324387-123", "abid@gmail.com", 1, "OOP", "Professor"))
Teachers.append(Teacher("ashas", 65, "3243234-123", "abid@gmail.com", 2, "ITC", "Professor"))

Staffs.append(Staff("shair ali", 35, "324387-123", "shair@gmail.com", 1, " Librarian"))
Staffs.append(Staff("albert", 35, "324387-123", "albert@gmail.com", 1, " Accountant"))

ResearchStudents.append(ResearchStudent("faizan", 20, "352029-322-21", "faizan@gmail.com","BSSE", "8th", "Computer Vision", "Abid"))

admin = Staff("admin", 35, "324387-123", "admin@gmail.com", 1, "Admin")

"""# **Main**"""

menu(Students, Teachers, admin, ResearchStudents, GraduateStudents)